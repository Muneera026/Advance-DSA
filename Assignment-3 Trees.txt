// Q1. Implement Binary tree

class Node {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

class BinarySearchTree {
  constructor() {
    this.root = null;
  }

  insert(value) {
    const newNode = new Node(value);

    if (this.root === null) {
      this.root = newNode;
    } else {
      this.insertNode(this.root, newNode);
    }
  }

  insertNode(node, newNode) {
    if (newNode.value < node.value) {
      if (node.left === null) {
        node.left = newNode;
      } else {
        this.insertNode(node.left, newNode);
      }
    } else {
      if (node.right === null) {
        node.right = newNode;
      } else {
        this.insertNode(node.right, newNode);
      }
    }
  }

  search(value) {
    return this.searchNode(this.root, value);
  }

  searchNode(node, value) {
    if (node === null) {
      return false;
    }

    if (value < node.value) {
      return this.searchNode(node.left, value);
    } else if (value > node.value) {
      return this.searchNode(node.right, value);
    } else {
      return true;
    }
  }
}

const bst = new BinarySearchTree();

bst.insert(8);
bst.insert(3);
bst.insert(10);
bst.insert(1);
bst.insert(6);
bst.insert(14);

console.log(bst.search(6)); // Output: true
console.log(bst.search(11)); // Output: false

                    OR
                  ------

class Node {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

class BinaryTree {
  constructor() {
    this.root = null;
  }

  insert(value) {
    const newNode = new Node(value);

    if (this.root === null) {
      this.root = newNode;
    } else {
      this.insertNode(this.root, newNode);
    }
  }

  insertNode(node, newNode) {
    if (node.left === null) {
      node.left = newNode;
    } else if (node.right === null) {
      node.right = newNode;
    } else {
      const random = Math.random();
      if (random < 0.5) {
        this.insertNode(node.left, newNode);
      } else {
        this.insertNode(node.right, newNode);
      }
    }
  }

  preOrderTraversal() {
    this.preOrderTraversalNode(this.root);
  }

  preOrderTraversalNode(node) {
    if (node !== null) {
      console.log(node.value);
      this.preOrderTraversalNode(node.left);
      this.preOrderTraversalNode(node.right);
    }
  }

  inOrderTraversal() {
    this.inOrderTraversalNode(this.root);
  }

  inOrderTraversalNode(node) {
    if (node !== null) {
      this.inOrderTraversalNode(node.left);
      console.log(node.value);
      this.inOrderTraversalNode(node.right);
    }
  }

  postOrderTraversal() {
    this.postOrderTraversalNode(this.root);
  }

  postOrderTraversalNode(node) {
    if (node !== null) {
      this.postOrderTraversalNode(node.left);
      this.postOrderTraversalNode(node.right);
      console.log(node.value);
    }
  }
}
const bt = new BinaryTree();

bt.insert(1);
bt.insert(2);
bt.insert(3);
bt.insert(4);
bt.insert(5);

console.log('Pre-order traversal:');
bt.preOrderTraversal();
console.log('In-order traversal:');
bt.inOrderTraversal();
console.log('Post-order traversal:');
bt.postOrderTraversal();


--------------------------------------------------------------------------------------------------------------------- 

// Q2. Find height of a given tree

class Node {
    constructor(value, left, right) {
        this.value = value
        this.left = left
        this.right = right
    }
}
function getTreeHeight(root) {
    if (!root) {
        return 0
    }
    let left = 0
    let right = 0
    if (root.left) {
        left = getTreeHeight(root.left)
    }
    if (root.right) {
        right = getTreeHeight(root.right)
    }
    return Math.max(left, right) + 1
}
const root = new Node(20)
root.left = new Node(22)
root.right = new Node(12)
root.left.left = new Node(15)
root.left.right = new Node(33)
root.right.right = new Node(10)
root.left.right.left = new Node(5)

console.log("Height of tree is:", getTreeHeight(root) - 1)
--------------------------------------------------------------------------------------------------------------------- 

// Q3. Perform Pre-order, Post-order, In-order traversal

class Node {
    constructor(value) {
        this.value = value
        this.left = null
        this.right = null
    }
}
function preorder(node) {
    // L N R
    if (node !== null) {
        console.log(node.value)
        preorder(node.left)
        preorder(node.right)
    }

}

function postorder(node) {
    // L N R
    if (node !== null) {
        postorder(node.left)
        postorder(node.right)
        console.log(node.value)
    }

}

function inorder(node) {
    // L N R
    if (node.left !== null && node.right !== null) {
        inorder(node.left)
        console.log(node.value)
        inorder(node.right)
    }
}
const root = new Node(1);
root.left = new Node(2);
root.right = new Node(3);
root.left.left = new Node(4);
root.left.right = new Node(5);

console.log("preorder Traversal")
preorder(root)

console.log("postorder Traversal")
postorder(root)

console.log("Inorder Traversal")
inorder(root)

--------------------------------------------------------------------------------------------------------------------- 

// Q4. Function to print all the leaves in a given binary tree

class Node {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}
// Function to print leaf

function printLeaves(root) {
  if (root === null) {
    return;
  }

  if (root.left === null && root.right === null) {
    console.log(root.value);
    return;
  }

  if (root.left !== null) {
    printLeaves(root.left);
  }

  if (root.right !== null) {
    printLeaves(root.right);
  }
}

// Example usage
const root = new Node(1);
root.left = new Node(2);
root.right = new Node(3);
root.left.left = new Node(4);
root.right.left = new Node(5);
root.right.right = new Node(8);
root.right.left.left = new Node(6);
root.right.left.right = new Node(7);
root.right.right.left = new Node(9);
root.right.right.right = new Node(10);

console.log("Leaves of the binary tree:");
printLeaves(root);

--------------------------------------------------------------------------------------------------------------------- 

// Q5.  Implement BFS (Breath First Search) and DFS (Depth First Search)

class Node {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

class BinaryTree {
  constructor() {
    this.root = null;
  }

  // BFS - Breadth First Search
  breadthFirstSearch() {
    if (this.root === null) {
      return;
    }

    const queue = [];
    queue.push(this.root);

    while (queue.length > 0) {
      const currentNode = queue.shift();
      console.log(currentNode.value);

      if (currentNode.left !== null) {
        queue.push(currentNode.left);
      }

      if (currentNode.right !== null) {
        queue.push(currentNode.right);
      }
    }
  }

  // DFS - Depth First Search (Pre-order)
  depthFirstSearch() {
    this.depthFirstSearchNode(this.root);
  }

  depthFirstSearchNode(node) {
    if (node === null) {
      return;
    }

    console.log(node.value);

    this.depthFirstSearchNode(node.left);
    this.depthFirstSearchNode(node.right);
  }
}

// Example usage
const bt = new BinaryTree();

bt.root = new Node(1);
bt.root.left = new Node(2);
bt.root.right = new Node(3);
bt.root.left.left = new Node(4);
bt.root.left.right = new Node(5);

console.log("Breadth First Search:");
bt.breadthFirstSearch();

console.log("Depth First Search:");
bt.depthFirstSearch();

--------------------------------------------------------------------------------------------------------------------- 

// Q6.  Find sum of all left leaves in a given Binary Tree

class Node {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

function sumOfLeftLeaves(root) {
  if (root === null) {
    return 0;
  }

  let sum = 0;

  // Check if the left child is a leaf node
  if (root.left !== null && root.left.left === null && root.left.right === null) {
    sum += root.left.value;
  }

  // Recursively traverse the left and right subtrees
  sum += sumOfLeftLeaves(root.left);
  sum += sumOfLeftLeaves(root.right);

  return sum;
}

// Example usage
const root = new Node(20);
root.left = new Node(49);
root.right = new Node(23);
root.left.left = new Node(52);
root.left.right = new Node(50);
root.right.left = new Node(5);
root.right.right = new Node(12);


const leftLeavesSum = sumOfLeftLeaves(root);
console.log("Sum of left leaves:", leftLeavesSum);

--------------------------------------------------------------------------------------------------------------------- 

// Q7.  Find sum of all nodes of the given perfect binary tree

class Node {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

function sumOfAllNodes(root) {
  if (root === null) {
    return 0;
  }

  let height = 0;
  let current = root;

  // Calculate the height of the tree
  while (current.left !== null) {
    height++;
    current = current.left;
  }

  // Calculate the total number of nodes using the height
  const totalNodes = Math.pow(2, height + 1) - 1;

  // Calculate the sum of all nodes
  return sumOfNodes(root, totalNodes);
}

function sumOfNodes(node, totalNodes) {
  if (node === null) {
    return 0;
  }

  // Recursively calculate the sum of left and right subtrees
  const leftSum = sumOfNodes(node.left, totalNodes / 2);
  const rightSum = sumOfNodes(node.right, totalNodes / 2);

  // Calculate the sum of all nodes
  return node.value + leftSum + rightSum;
}

// Example usage
const root = new Node(1);
root.left = new Node(2);
root.right = new Node(3);
root.left.left = new Node(4);
root.left.right = new Node(5);
root.right.left = new Node(6);
root.right.right = new Node(7);

const nodesSum = sumOfAllNodes(root);
console.log("Sum of all nodes:", nodesSum);

--------------------------------------------------------------------------------------------------------------------- 

// Q8.  Count subtress that sum up to a given value x in a binary tree

class Node {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

function countSubtreesWithSum(root, targetSum) {
  let count = 0;

  function dfs(node) {
    if (node === null) {
      return 0;
    }
    const leftSum = dfs(node.left);
    const rightSum = dfs(node.right);
    const currentSum = node.value + leftSum + rightSum;

    if (currentSum === targetSum) {
      count++;
    }
    return currentSum;
  }
  dfs(root);
  return count;
}

// Example usage
const root = new Node(5);
root.left = new Node(-10);
root.right = new Node(3);
root.left.left = new Node(9);
root.left.right = new Node(8);
root.right.right = new Node(7);
root.right.left = new Node(-4);

const targetSum = 7;
const count = countSubtreesWithSum(root, targetSum);
console.log("Number of subtrees with sum", targetSum + ":", count);

--------------------------------------------------------------------------------------------------------------------- 

// Q9.  Find maximum level sum in Binary Tree

class Node {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

function maxLevelSum(root) {
  if (root === null) {
    return 0;
  }

  let maxSum = root.value;
  let level = 0;
  let queue = [root];

  while (queue.length > 0) {
    let levelSum = 0;
    let levelSize = queue.length;

    for (let i = 0; i < levelSize; i++) {
      let currentNode = queue.shift();
      levelSum += currentNode.value;

      if (currentNode.left !== null) {
        queue.push(currentNode.left);
      }

      if (currentNode.right !== null) {
        queue.push(currentNode.right);
      }
    }

    if (levelSum > maxSum) {
      maxSum = levelSum;
      level++;
    }
  }

  return maxSum;
}

// Example usage
const root = new Node(1);
root.left = new Node(2);
root.right = new Node(3);
root.left.left = new Node(4);
root.left.right = new Node(5);
root.right.right = new Node(6);

const maxSum = maxLevelSum(root);
console.log("Maximum level sum:", maxSum);


--------------------------------------------------------------------------------------------------------------------- 

// Q10.  Print the nodes at odd levels of a tree

class Node {
  constructor(value) {
    this.value = value;
    this.left = null;
    this.right = null;
  }
}

function printNodesAtOddLevels(root) {
  if (root === null) {
    return;
  }
  traverse(root, 1);
}
function traverse(node, level) {
  if (node === null) {
    return;
  }
  // Print the node value if the level is odd
  if (level % 2 !== 0) {
    console.log(node.value);
  }
 // Recursively traverse the left and right subtrees
  traverse(node.left, level + 1);
  traverse(node.right, level + 1);
}
// Example usage
const root = new Node(1);
root.left = new Node(2);
root.right = new Node(3);
root.left.left = new Node(4);
root.left.right = new Node(5);
root.right.left = new Node(6);
root.right.right = new Node(7);

console.log("Nodes at odd levels:");
printNodesAtOddLevels(root);


--------------------------------------------------------------------------------------------------------------------- 

