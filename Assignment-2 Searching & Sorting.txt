// Q1. Implement Binary Search

function binarySearch(arr, key) {
    let low = 0;
    let high = arr.length - 1;

    while (low <= high) {
        let mid = Math.floor((low + high) / 2)

        if (key === arr[mid]) {
            return mid
        } else if (key > arr[mid]) {
            low = mid + 1
        } else if (key < arr[mid]) {
            high = mid - 1
        }
    }

    return -1
}

const arr = [12, 15, 16, 19, 35, 47, 89, 95, 105]
const key = 47
console.log(binarySearch(arr, key))
--------------------------------------------------------------------------------------------------------------------- 

// Q2. Implement Merge Sort

function mergeSort(arr) {
    if (arr == undefined || arr.length <= 1) {
        return arr
    }
    const middle = Math.floor(arr.length / 2)
    const left = arr.slice(0, middle);
    const right = arr.slice(middle);
    return merge(mergeSort(left), mergeSort(right))
}
function merge(left, right) {
    const result = []
    let i = 0
    let j = 0
    while (i < left.length && j < right.length) {
        if (left[i] < right[j]) {
            result.push(left[i])
            i++
        } else if (left[i] > right[j]) {
            result.push(right[j])
            j++
        }
    }
    while (i < left.length) {
        result.push(left[i])
        i++
    }
    while (j < right.length) {
        result.push(right[j])
        j++
    }
    return result
}
var myArray = [14, 18, 31, 21, 34, 56, 22, 39, 20, 1];
var sortedArray = mergeSort(myArray);
console.log(sortedArray);
--------------------------------------------------------------------------------------------------------------------- 

// Q3. Implement Quick Sort

var items = [5,3,7,6,2,9];
function swap(items, leftIndex, rightIndex){
    var temp = items[leftIndex];
    items[leftIndex] = items[rightIndex];
    items[rightIndex] = temp;
}
function partition(items, left, right) {
    var pivot   = items[Math.floor((right + left) / 2)]; 
        i       = left; 
        j       = right; 
    while (i <= j) {
        while (items[i] < pivot) {
            i++;
        }
        while (items[j] > pivot) {
            j--;
        }
        if (i <= j) {
            swap(items, i, j); 
            i++;
            j--;
        }
    }
    return i;
}

function quickSort(items, left, right) {
    var index;
    if (items.length > 1) {
        index = partition(items, left, right); 
        if (left < index - 1) { 
            quickSort(items, left, index - 1);
        }
        if (index < right) { 
            quickSort(items, index, right);
        }
    }
    return items;
}
var sortedArray = quickSort(items, 0, items.length - 1);
console.log(sortedArray);

--------------------------------------------------------------------------------------------------------------------- 

// Q4. Implement Insertion Sort

function insertionSort(arr) {
  for (let i = 1; i < arr.length; i++) {
    let currentValue = arr[i]
    let j
    for (j = i - 1; j >= 0 && arr[j] > currentValue; j--) {
      arr[j + 1] = arr[j]
    }
    arr[j + 1] = currentValue
  }
  return arr
}
console.log(insertionSort([12, 11, 13, 5, 6]))

--------------------------------------------------------------------------------------------------------------------- 

// Q5.  Write a program to sort list of strings (similar to that of dictionary)

function merge(arr, l, m, r)
{
    var n1 = m - l + 1;
    var n2 = r - m;

    var L = new Array(n1);
    var R = new Array(n2);
 
    for (var i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (var j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];
  
    var i = 0;
    var j = 0;
    var k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        }
        else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }
    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }
    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}
function mergeSort(arr,l, r){
    if(l>=r){
        return;//returns recursively
    }
    var m =l+ parseInt((r-l)/2);
    mergeSort(arr,l,m);
    mergeSort(arr,m+1,r);
    merge(arr,l,m,r);
}
function printArray( A, size)
{
    for (var i = 0; i < size; i++)
    console.log( A[i] + " ");
}
    let arr = ["banana", "orange", "apple", "mango"]; 
      var arr_size = arr.length;
    console.log( "Given array is :");
    console.log(arr);
    mergeSort(arr, 0, arr_size - 1);
    console.log( "Sorted array is :");
    console.log(arr);


--------------------------------------------------------------------------------------------------------------------- 

